# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "nox>=2025.2.9",
{%- if install == 'uv sync' %}
#     "uv>=0.7.6",
{%- endif %}
# ]
# ///
"""Task automation with Nox."""

from __future__ import annotations

import os
from pathlib import Path

import nox
from nox.command import CommandFailed

nox.needs_version = ">=2025.2.9"
nox.options.default_venv_backend = "uv"
nox.options.reuse_existing_virtualenvs = True
nox.options.sessions = (
    "lint",
    "type",
    "type-tests",
    "pkg",
{%- if docs %}
    "docs",
{%- endif %}
    "tests",
)

PYPROJECT = nox.project.load_toml()
PROJECT_NAME = PYPROJECT["project"]["name"]
SUPPORTED_PYTHON_VERSIONS = nox.project.python_versions(PYPROJECT)
DEFAULT_PYTHON_VERSION = Path(".python-version").read_text().rstrip()


@nox.session(python=SUPPORTED_PYTHON_VERSIONS, tags=["tests"])
def tests(session: nox.Session) -> None:
    """Run the test suite."""
{%- if install == 'uv pip' %}
    session.install(".")
    session.install(*nox.project.dependency_groups(PYPROJECT, "tests"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--no-editable",
        f"--reinstall-package={PROJECT_NAME}",
        "--no-default-groups",
        "--group=tests",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    tmp_dir = Path(session.create_tmp())
    htmlcov_dir = tmp_dir / "htmlcov"
    xml_path = tmp_dir / "coverage.xml"
    session.run(
        "pytest",
        *(
            session.posargs
            or (
                "--durations",
                "15",
                "-n",
                os.getenv("PYTEST_XDIST_AUTO_NUM_WORKERS") or "auto",
                "--junit-xml",
                tmp_dir / "junit.xml",
                "--cov",
                "--cov-config",
                "pyproject.toml",
                "--cov-context",
                "test",
                "--cov-report",
                "term-missing:skip-covered",
                "--cov-report",
                f"html:{htmlcov_dir}",
                "--cov-report",
                f"xml:{xml_path}",
            )
        ),
        env={
            "COVERAGE_FILE": os.getenv("COVERAGE_FILE") or str(tmp_dir / ".coverage"),
            "COVERAGE_PROCESS_START": "pyproject.toml",
        },
    )


@nox.session(python=DEFAULT_PYTHON_VERSION, tags=["checks"])
def lint(session: nox.Session) -> None:
    """Run pre-commit linting."""
{%- if install == 'uv pip' %}
    session.install(*nox.project.dependency_groups(PYPROJECT, "lint"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--only-group=lint",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    session.run(
        "pre-commit",
        "run",
        "--all-files",
        *session.posargs,
        env={"FORCE_PRE_COMMIT_UV_PATCH": "1"},
    )


@nox.session(python=DEFAULT_PYTHON_VERSION, name="type", tags=["checks"])
def type_check(session: nox.Session) -> None:
    """Type check source code."""
{%- if install == 'uv pip' %}
    session.install(".")
    session.install(*nox.project.dependency_groups(PYPROJECT, "type"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--no-editable",
        f"--reinstall-package={PROJECT_NAME}",
        "--no-default-groups",
        "--group=type",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    session.run("mypy", "src")


@nox.session(python=DEFAULT_PYTHON_VERSION, name="type-tests", tags=["checks"])
def type_check_tests(session: nox.Session) -> None:
    """Type check tests."""
{%- if install == 'uv pip' %}
    session.install(".")
    session.install(*nox.project.dependency_groups(PYPROJECT, "tests", "type"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--no-editable",
        f"--reinstall-package={PROJECT_NAME}",
        "--no-default-groups",
        "--group=tests",
        "--group=type"
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    session.run("mypy", "tests")


@nox.session(python=DEFAULT_PYTHON_VERSION, tags=["checks"])
def pkg(session: nox.Session) -> None:
    """Check package distributions."""
{%- if install == 'uv pip' %}
    session.install(*nox.project.dependency_groups(PYPROJECT, "pkg"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--only-group=pkg",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    tmp_dir = Path(session.create_tmp())
    session.run("uv", "build", "--out-dir", tmp_dir)
    session.run("check-wheel-contents", "--no-config", tmp_dir)
    session.run("twine", "check", "--strict", tmp_dir / "*")

{% if docs == 'mkdocs' %}
@nox.session(python=DEFAULT_PYTHON_VERSION, tags=["checks"])
def docs(session: nox.Session) -> None:
    """Generate documentation."""
{%- if install == 'uv pip' %}
    session.install("-e", ".")
    session.install(*nox.project.dependency_groups(PYPROJECT, "docs"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--no-editable",
        f"--reinstall-package={PROJECT_NAME}",
        "--no-default-groups",
        "--group=docs",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    tmp_dir = Path(session.create_tmp())
    session.run(
        "mkdocs",
        "build",
        "--clean",
        "--strict",
        "--site-dir",
        tmp_dir,
        *session.posargs,
    )


@nox.session(python=DEFAULT_PYTHON_VERSION)
def autodocs(session: nox.Session) -> None:
    """Serve documentation locally."""
{%- if install == 'uv pip' %}
    session.install("-e", ".")
    session.install(*nox.project.dependency_groups(PYPROJECT, "docs"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--no-default-groups",
        "--group=docs",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    session.run(
        "mkdocs",
        "serve",
        "--strict",
        "--open",
        *session.posargs,
    )

{% endif %}
@nox.session(python=DEFAULT_PYTHON_VERSION)
def release(session: nox.Session) -> None:
    """Prepare a new release."""
{%- if install == 'uv pip' %}
    session.install(*nox.project.dependency_groups(PYPROJECT, "release"))
{%- else %}
    session.run_install(
        "uv",
        "sync",
        "--locked",
        "--only-group=release",
        f"--python={session.virtualenv.location}",
        env={"UV_PROJECT_ENVIRONMENT": session.virtualenv.location},
    )
{%- endif %}
    session.run("python", Path("scripts", "release.py"), *session.posargs)


if __name__ == "__main__":
    nox.main()

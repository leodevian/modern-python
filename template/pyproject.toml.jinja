[build-system]
{%- with requires = [] %}
{%- if backend == 'hatch' %}
build-backend = "hatchling.build"
{%- if 'hatch-vcs' in hatch_plugins %}{% do requires.append('hatch-vcs>=0.4') %}{% endif %}
{%- do requires.append('hatchling>=1.27') %}
{%- elif backend == 'uv' %}
build-backend = "uv_build"
{%- do requires.append('uv-build>=0.7.19,<0.8') %}
{%- endif %}
requires = [
{%- for requirement in requires | sort %}
  "{{ requirement }}",
{%- endfor %}
]
{%- endwith %}

[project]
name = "{{ distribution_name }}"
{%- if not dynamic_version %}
version = "0.1.0"
{%- endif %}
description = "{{ project_description }}"
readme = "README.md"
license = "{{ license }}"
license-files = [
  "LICENSE",
]
maintainers = [
  { name = "{{ user_name }}", email = "{{ user_email }}" },
]
authors = [
  { name = "{{ user_name }}", email = "{{ user_email }}" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Typing :: Typed",
]
{%- if dynamic_version %}
dynamic = [
  "version",
]
{%- endif %}
{%- with dependencies = [] %}
{%- if cli == 'click' %}{% do dependencies.append('click>=8.2') %}
{%- elif cli == 'typer' %}{% do dependencies.append('typer>=0.15.4') %}{% endif %}
{%- if dependencies %}
dependencies = [
{%- for dependency in dependencies | sort %}
  "{{ dependency }}",
{%- endfor %}
]
{%- else %}
dependencies = [  ]
{%- endif %}
{%- endwith %}
{%- if docs %}
urls.changelog = "{{ documentation_url }}changelog/"
urls.documentation = "{{ documentation_url }}"
{%- else %}
urls.changelog = "{{ repository_url }}/blob/main/CHANGELOG.md"
{%- endif %}
urls.homepage = "{{ repository_url }}"
urls.issues = "{{ repository_url }}/issues"
urls.repository = "{{ repository_url }}"
{% if cli == 'typer' -%}
scripts.{{ distribution_name }} = "{{ package_name }}.cli:app"
{% elif cli -%}
scripts.{{ distribution_name }} = "{{ package_name }}.cli:main"
{% endif %}
[dependency-groups]
dev = [
  { include-group = "lint" },
  { include-group = "release" },
  { include-group = "tests" },
  { include-group = "type" },
]
type = [
  "mypy>=1.15",
]
{%- if docs == 'mkdocs' %}
docs = [
  "black>=24.10",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.5.47",
  "mkdocstrings[python]>=0.28.2",
]
{%- endif %}
lint = [
  "pre-commit-uv>=4.1.4",
]
tests = [
  "coverage>=7.8",
  "pytest>=8.3.4",
  "pytest-cov>=6",
  "pytest-xdist>=3.6.1",
]
pkg = [
  "check-wheel-contents>=0.6.1",
  "twine>=6.0.1",
  "uv>=0.6.5",
]
release = [
  "packaging>=24.2",
  "towncrier>=24.8",
{%- if not dynamic_version %}
  "uv>=0.7.7",
{%- endif %}
]
{% if backend == 'hatch' and hatch_plugins %}
[tool.hatch]
{%- if 'hatch-vcs' in hatch_plugins %}
build.hooks.vcs.version-file = "src/{{ package_name }}/VERSION.txt"
version.fallback-version = "0.0.0"
version.source = "vcs"
version.raw-options.local_scheme = "no-local-version"
{%- endif %}
{% endif %}
[tool.ruff]
lint.select = [
  "ALL",
]
lint.ignore = [
  "COM812", # conflicts with formatter
  "ISC001", # conflicts with formatter
]
lint.per-file-ignores."tests/**" = [
  "S101", # using assert is okay in tests
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.pydocstyle.convention = "google"

[tool.codespell]
write-changes = true

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
{%- if 'readme' in doctest or 'docs' in doctest and docs == 'mkdocs' %}
  "--doctest-glob",
  "*.md",
{%- endif %}
{%- if 'docstrings' in doctest %}
  "--doctest-modules",
{%- endif %}
  "--showlocals",
  "--strict-config",
  "--strict-markers",
]
filterwarnings = [
  "error",
  "ignore:unclosed database in <sqlite3.Connection:ResourceWarning",
]
log_cli_level = "INFO"
testpaths = [
{%- if 'docs' in doctest %}
  "docs",
{%- endif %}
{%- if 'docstrings' in doctest %}
  "src",
{%- endif %}
  "tests",
{%- if 'readme' in doctest %}
  "README.md",
{%- endif %}
]
xfail_strict = true

[tool.coverage]
html.show_contexts = true
html.skip_covered = false
paths.source = [
  "src",
{%- if tasks == 'tox' %}
  ".tox/**/site-packages",
{%- elif tasks == 'nox' %}
  ".nox/**/site-packages",
{%- endif %}
]
report.exclude_also = [
  "-> [\"']?(Never|NoReturn)[\"']?:",
  ": \\.\\.\\.(\\s*#.*)?$",
  "^\\s*(typing\\.)?assert_never\\b",
  "^\\s*@(abc\\.)?abstractmethod\\b",
  "^\\s*@(typing\\.)?overload\\b",
  "^\\s*if (typing\\.)?TYPE_CHECKING:",
  "^\\s*if False:",
  "^\\s*raise NotImplementedError\\b",
  "^\\s*return NotImplemented\\b",
  "^\\s+\\.\\.\\.$",
  "^if __name__ == [\"']__main__[\"']:$",
]
report.fail_under = 100
report.show_missing = true
report.skip_covered = true
run.branch = true
run.omit = [
  "__main__.py",
  "setup.py",
]
run.parallel = true
run.source_dirs = [
  "tests",
]
run.source_pkgs = [
  "{{ package_name }}",
]

[tool.towncrier]
name = "{{ project_name }}"
filename = "CHANGELOG.md"
directory = "changelog.d"
start_string = "<!-- towncrier release notes start -->\n"
underlines = [ "", "", "" ]
title_format = "## [{version}]({{ repository_url }}/tree/v{version}) - {project_date}"
issue_format = "[#{issue}]({{ repository_url }}/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[tool.mypy]
python_version = "3.10"
warn_unreachable = true
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]
strict = true
pretty = true
